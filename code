# Generate household structure for a population.
# input n The total population size.
# input hmax The maximum household size.
# output An integer vector of length n, where the value at index i is the household ID for person i.


# This function creates a vector of household assignments for n individuals.

create_households <- function(n, hmax = 5) {
  h <- rep(1:n, times = sample(1:hmax, n, replace = TRUE))[1:n]
  return(h)   # Return the completed vector of household assignments
}

# This function creates a random network where the probability of a link forming between any two people is proportional to the product of their sociability parameter (beta).
# Connections are not allowed between people who belong to the same household. (i.e we generate a random contact network)

# input beta A numeric vector of length n. beta[i] is the sociability weighting factor for person i.
# input h A numeric or character vector of length `n`, where `h[i]` is the  household ID for person i. This is required to prevent intra-household links.
# input nc An integer specifying the number of non-household contacts per person. Defaults to 15.
# output A list of length n. The i-th element of the list is an integer vector containing the indices of the network contacts of person i.

net_helper <- function(idx, adj_matrix) {
  connections <- which(adj_matrix[idx, ])
  if (length(connections) == 0) {
    return(NULL)
  } else {
    return(connections)
  }
}

# Main network generation function 
get.net <- function(beta, h, nc = 15) { 
  # n is determined by the length of the beta vector
  n <- length(beta)
  
  prob_const <- nc / (mean(beta)^2 * (n - 1))
  probs <- outer(beta, beta, `*`) * prob_const
  
  diag(probs) <- 0
  
  is_same_household <- outer(h, h, `==`)
  probs[is_same_household] <- 0
  
  rands <- matrix(runif(n * n), n, n)
  rands[lower.tri(rands)] <- t(rands)[lower.tri(rands)]
  
  adj_matrix <- rands < probs
  
  network_list <- lapply(1:n, net_helper, adj_matrix)

  return(network_list)
}

